
> williams-holdingss@0.1.0 build
> next build

  â–² Next.js 14.2.5
  - Environments: .env
  - Experiments (use with caution):
    Â· typedRoutes

   Creating an optimized production build ...
Failed to compile.

./src/app/api/card-requests/route.ts
Error: 
  [31mx[0m the name `NextResponse` is defined multiple times
    ,-[[36;1;4m/workspaces/WilliamsHoldingss/src/app/api/card-requests/route.ts[0m:1:1]
 [2m 1[0m | import { NextResponse } from 'next/server'
    : [31;1m         ^^^^^^|^^^^^[0m
    :                [31;1m`-- [31;1mprevious definition of `NextResponse` here[0m[0m
 [2m 2[0m | import { prisma } from '@/lib/prisma'
 [2m 3[0m | 
 [2m 4[0m | export async function POST(req: Request) {
 [2m 5[0m |   try {
 [2m 6[0m |     const body = await req.json()
 [2m 7[0m |     const { userId, brand = 'VISA', cardType = 'VIRTUAL' } = body
 [2m 8[0m |     if (!userId) return NextResponse.json({ error: 'missing userId' }, { status: 400 })
 [2m 9[0m | 
 [2m10[0m |     // ensure user exists
 [2m11[0m |     const user = await prisma.user.findUnique({ where: { id: userId } })
 [2m12[0m |     if (!user) return NextResponse.json({ error: 'user not found' }, { status: 404 })
 [2m13[0m | 
 [2m14[0m |     const cr = await prisma.cardRequest.create({ data: { userId, brand, cardType } })
 [2m15[0m |     return NextResponse.json({ id: cr.id }, { status: 201 })
 [2m16[0m |   } catch (err) {
 [2m17[0m |     console.error(err)
 [2m18[0m |     return NextResponse.json({ error: 'internal error' }, { status: 500 })
 [2m19[0m |   }
 [2m20[0m | }
 [2m21[0m | import { NextResponse } from 'next/server'
    : [33;1m         ^^^^^^|^^^^^[0m
    :                [33;1m`-- [33;1m`NextResponse` redefined here[0m[0m
 [2m22[0m | import { prisma } from '@/lib/prisma'
 [2m23[0m | import { getCurrentUser } from '@/lib/auth'
    `----

  [31mx[0m the name `prisma` is defined multiple times
    ,-[[36;1;4m/workspaces/WilliamsHoldingss/src/app/api/card-requests/route.ts[0m:1:1]
 [2m 1[0m | import { NextResponse } from 'next/server'
 [2m 2[0m | import { prisma } from '@/lib/prisma'
    : [31;1m         ^^^|^^[0m
    :             [31;1m`-- [31;1mprevious definition of `prisma` here[0m[0m
 [2m 3[0m | 
 [2m 4[0m | export async function POST(req: Request) {
 [2m 5[0m |   try {
 [2m 6[0m |     const body = await req.json()
 [2m 7[0m |     const { userId, brand = 'VISA', cardType = 'VIRTUAL' } = body
 [2m 8[0m |     if (!userId) return NextResponse.json({ error: 'missing userId' }, { status: 400 })
 [2m 9[0m | 
 [2m10[0m |     // ensure user exists
 [2m11[0m |     const user = await prisma.user.findUnique({ where: { id: userId } })
 [2m12[0m |     if (!user) return NextResponse.json({ error: 'user not found' }, { status: 404 })
 [2m13[0m | 
 [2m14[0m |     const cr = await prisma.cardRequest.create({ data: { userId, brand, cardType } })
 [2m15[0m |     return NextResponse.json({ id: cr.id }, { status: 201 })
 [2m16[0m |   } catch (err) {
 [2m17[0m |     console.error(err)
 [2m18[0m |     return NextResponse.json({ error: 'internal error' }, { status: 500 })
 [2m19[0m |   }
 [2m20[0m | }
 [2m21[0m | import { NextResponse } from 'next/server'
 [2m22[0m | import { prisma } from '@/lib/prisma'
    : [33;1m         ^^^|^^[0m
    :             [33;1m`-- [33;1m`prisma` redefined here[0m[0m
 [2m23[0m | import { getCurrentUser } from '@/lib/auth'
 [2m24[0m | 
 [2m25[0m | // POST /api/card-requests  { cardType: 'VIRTUAL' | 'PHYSICAL' }
    `----

  [31mx[0m the name `POST` is defined multiple times
    ,-[[36;1;4m/workspaces/WilliamsHoldingss/src/app/api/card-requests/route.ts[0m:1:1]
 [2m 1[0m | import { NextResponse } from 'next/server'
 [2m 2[0m | import { prisma } from '@/lib/prisma'
 [2m 3[0m | 
 [2m 4[0m | export async function POST(req: Request) {
    : [31;1m                      ^^|^[0m
    :                         [31;1m`-- [31;1mprevious definition of `POST` here[0m[0m
 [2m 5[0m |   try {
 [2m 6[0m |     const body = await req.json()
 [2m 7[0m |     const { userId, brand = 'VISA', cardType = 'VIRTUAL' } = body
 [2m 8[0m |     if (!userId) return NextResponse.json({ error: 'missing userId' }, { status: 400 })
 [2m 9[0m | 
 [2m10[0m |     // ensure user exists
 [2m11[0m |     const user = await prisma.user.findUnique({ where: { id: userId } })
 [2m12[0m |     if (!user) return NextResponse.json({ error: 'user not found' }, { status: 404 })
 [2m13[0m | 
 [2m14[0m |     const cr = await prisma.cardRequest.create({ data: { userId, brand, cardType } })
 [2m15[0m |     return NextResponse.json({ id: cr.id }, { status: 201 })
 [2m16[0m |   } catch (err) {
 [2m17[0m |     console.error(err)
 [2m18[0m |     return NextResponse.json({ error: 'internal error' }, { status: 500 })
 [2m19[0m |   }
 [2m20[0m | }
 [2m21[0m | import { NextResponse } from 'next/server'
 [2m22[0m | import { prisma } from '@/lib/prisma'
 [2m23[0m | import { getCurrentUser } from '@/lib/auth'
 [2m24[0m | 
 [2m25[0m | // POST /api/card-requests  { cardType: 'VIRTUAL' | 'PHYSICAL' }
 [2m26[0m | export async function POST(req: Request) {
    : [33;1m                      ^^|^[0m
    :                         [33;1m`-- [33;1m`POST` redefined here[0m[0m
 [2m27[0m |   const user = await getCurrentUser()
 [2m28[0m |   const dbUser = await prisma.user.upsert({ where: { email: user.email }, update: {}, create: { email: user.email, name: user.name ?? 'Demo' } })
    `----

Import trace for requested module:
./src/app/api/card-requests/route.ts


> Build failed because of webpack errors
